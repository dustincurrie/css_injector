<?php
// $Id: css_injector.install,v 1.1.2.2 2008/08/10 01:56:58 add1sun Exp $

/**
 * Implementation of hook_install().
 */
function css_injector_install() {
  drupal_install_schema('css_injector');
}

/**
 * Implementation of hook_schema().
 */
function css_injector_schema() {
  $schema['css_injector_rule'] = array(
    'fields' => array(
      'crid' => array(
        'description' => 'The primary identifier for the CSS injection rule',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE),
      'title' => array(
        'description' => 'The descriptive title of the CSS injection rule',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE),
      'rule_type' => array(
        'description' => 'The type of rule to use when determining if the CSS should be injected',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0),
      'rule_conditions' => array(
        'description' => 'The data to evaluate when determining if the CSS should be injected',
        'type' => 'text',
        'not null' => TRUE),
      'media' => array(
        'description' => 'The media type of the CSS file (screen, print, etc.)',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE),
      'preprocess' => array(
        'description' => 'Whether the CSS file should be included by the CSS preprocessor',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0),
      'file_path' => array(
        'description' => 'The path of the CSS file to inject',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE),
    ),
    'primary key' => array('crid'),
  );
  $schema['css_injector_node'] = array(
  'fields' => array(
      'nid' => array(
        'description' => 'The node id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0),
      'crid' => array(
        'description' => 'The primary identifier for the CSS injection rule in injection rule table',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0),    
    ),
    'primary key' => array('nid', 'crid'),
  );
  return $schema;
}

/**
 * Implementation of hook_uninstall().
 */
function css_injector_uninstall() {
  cache_clear_all('css_injector:*', 'cache', TRUE);
  $results = db_query("SELECT * FROM {css_injector_rule}");
  while ($rule = db_fetch_array($results)) {
    file_delete(file_create_path($rule['file_path']));
  }
  db_query("DROP TABLE {css_injector_rule}");
  db_query("DROP TABLE {css_injector_node}");
  foreach (node_get_types('names') as $typename => $visiblename) {
    if (variable_get('css_injector_use'. $typename, 0)) {
      variable_del('css_injector_use_'. $typename);
    }
  }  
}

function css_injector_update_6101() {
  $ret = array();
  $ret[] = update_sql("
    CREATE TABLE IF NOT EXISTS {css_injector_node} (
      nid int(10) NOT NULL default '0',
      crid int(10) NOT NULL default '0',
      PRIMARY KEY  (nid, crid)
    )");
  return $ret;
}
